import tensorflow as tf
from tensorflow import keras
from keras import layers
from tensorflow._api.v2.experimental import numpy
import numpy
from tensorflow.keras import layers
from keras_self_attention import SeqSelfAttention

from DP import *

notes = read_files()
# print(notes)

# get all pitch names
pitchnames = sorted(set(item for item in notes))

n_vocab = len(set(notes))

training_data = create_training_data(notes, n_vocab)
network_input, network_output = training_data

print(network_input.shape)
print(network_output.shape)

model = keras.Sequential()

model.add(tf.keras.layers.Bidirectional(
    tf.keras.layers.LSTM(
        256,
        input_shape=(network_input.shape[1], network_input.shape[2]),
        return_sequences=True
    )))
model.add(SeqSelfAttention(attention_activation='sigmoid'))

model.add(tf.keras.layers.Dropout(0.3))

model.add(tf.keras.layers.LSTM(256))
model.add(tf.keras.layers.Dense(256))
model.add(tf.keras.layers.Dropout(0.3))
model.add(tf.keras.layers.Dense(n_vocab))
model.add(tf.keras.layers.Activation('softmax'))
model.compile(loss='categorical_crossentropy', optimizer='rmsprop')

# Load the weights to each node
model.load_weights('model_3_trained.hdf5')

start = numpy.random.randint(0, len(network_input) - 1)
int_to_note = dict((number, note) for number, note in enumerate(pitchnames))
pattern = network_input[start]
prediction_output = []

# generate notes
for note_index in range(len(pattern)):
    prediction_input = numpy.reshape(pattern, (1, len(pattern), 1))
    prediction_input = prediction_input / float(n_vocab)
    prediction = model.predict(prediction_input, verbose=0)
    index = numpy.argmax(prediction)
    result = int_to_note[index]
    prediction_output.append(result)
    # pattern.append(index)
    numpy.append(pattern, index)
    pattern = pattern[1:len(pattern)]

offset = 0
output_notes = []
# create note and chord objects based on the values generated by the model
for pattern in prediction_output:
    # pattern is a chord
    if ('.' in pattern) or pattern.isdigit():
        notes_in_chord = pattern.split('.')
        notes = []
        for current_note in notes_in_chord:
            new_note = note.Note(int(current_note))
            new_note.storedInstrument = instrument.Piano()
            notes.append(new_note)
        new_chord = chord.Chord(notes)
        new_chord.offset = offset
        output_notes.append(new_chord)
    # pattern is a note
    else:
        new_note = note.Note(pattern)
        new_note.offset = offset
        new_note.storedInstrument = instrument.Piano()
        output_notes.append(new_note)
    # increase offset each iteration so that notes do not stack
    offset += 0.5

midi_stream = stream.Stream(output_notes)
midi_stream.write('midi', fp='compositions/predicted_model_3_output.mid')
